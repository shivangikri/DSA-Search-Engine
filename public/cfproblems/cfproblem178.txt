Monocarp is playing a tower defense game. A level in the game can be represented as an OX axis, where each lattice point from 11 to nn contains a tower in it.The tower in the ii-th point has cici mana capacity and riri mana regeneration rate. In the beginning, before the 00-th second, each tower has full mana. If, at the end of some second, the ii-th tower has xx mana, then it becomes min(x+ri,ci)min(x+ri,ci) mana for the next second.There are qq monsters spawning on a level. The jj-th monster spawns at point 11 at the beginning of tjtj-th second, and it has hjhj health. Every monster is moving 11 point per second in the direction of increasing coordinate.When a monster passes the tower, the tower deals min(H,M)min(H,M) damage to it, where HH is the current health of the monster and MM is the current mana amount of the tower. This amount gets subtracted from both monster's health and tower's mana.Unfortunately, sometimes some monsters can pass all nn towers and remain alive. Monocarp wants to know what will be the total health of the monsters after they pass all towers.
InputThe first line contains a single integer nn (1≤n≤2⋅1051≤n≤2⋅105) — the number of towers.The ii-th of the next nn lines contains two integers cici and riri (1≤ri≤ci≤1091≤ri≤ci≤109) — the mana capacity and the mana regeneration rate of the ii-th tower.The next line contains a single integer qq (1≤q≤2⋅1051≤q≤2⋅105) — the number of monsters.The jj-th of the next qq lines contains two integers tjtj and hjhj (0≤tj≤2⋅1050≤tj≤2⋅105; 1≤hj≤10121≤hj≤1012) — the time the jj-th monster spawns and its health.The monsters are listed in the increasing order of their spawn time, so tj<tj+1tj<tj+1 for all 1≤j≤q−11≤j≤q−1.
OutputPrint a single integer — the total health of all monsters after they pass all towers.
ExamplesInputCopy3
5 1
7 4
4 2
4
0 14
1 10
3 16
10 16
OutputCopy4
InputCopy5
2 1
4 1
5 4
7 5
8 3
9
1 21
2 18
3 14
4 24
5 8
6 25
7 19
8 24
9 24
OutputCopy40
