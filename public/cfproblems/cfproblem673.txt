You were playing with permutation pp of length nn, but you lost it in Blair, Alabama!Luckily, you remember some information about the permutation. More specifically, you remember an array bb of length nn, where bibi is the number of indices jj such that j<ij<i and pj>pipj>pi.You have the array bb, and you want to find the permutation pp. However, your memory isn't perfect, and you constantly change the values of bb as you learn more. For the next qq seconds, one of the following things happen:  11 ii xx — you realize that bibi is equal to xx;  22 ii — you need to find the value of pipi. If there's more than one answer, print any. It can be proven that there's always at least one possible answer under the constraints of the problem. Answer the queries, so you can remember the array!
InputThe first line contains a single integer nn (1≤n≤1051≤n≤105) — the size of permutation.The second line contains nn integers b1,b2…,bnb1,b2…,bn (0≤bi<i0≤bi<i) — your initial memory of the array bb.The third line contains a single integer qq (1≤q≤1051≤q≤105) — the number of queries.The next qq lines contain the queries, each with one of the following formats:   11 ii xx (0≤x<i≤n0≤x<i≤n), representing a query of type 11.  22 ii (1≤i≤n1≤i≤n), representing a query of type 22. It is guaranteed that there's at least one query of type 22.
OutputFor each query of type 22, print one integer — the answer to the query.
ExamplesInputCopy3
0 0 0
7
2 1
2 2
2 3
1 2 1
2 1
2 2
2 3
OutputCopy1
2
3
2
1
3
InputCopy5
0 1 2 3 4
15
2 1
2 2
1 2 1
2 2
2 3
2 5
1 3 0
1 4 0
2 3
2 4
2 5
1 4 1
2 3
2 4
2 5
OutputCopy5
4
4
3
1
4
5
1
5
4
1

NoteFor the first sample, there's initially only one possible permutation that satisfies the constraints: [1,2,3][1,2,3], as it must have 00 inversions.After the query of type 11, the array bb is [0,1,0][0,1,0]. The only permutation pp that produces this array is [2,1,3][2,1,3]. With this permutation, b2b2 is equal to 11 as p1>p2p1>p2.