You are given a tree consisting of nn vertices. Some of the vertices (at least two) are black, all the other vertices are white.You place a chip on one of the vertices of the tree, and then perform the following operations:  let the current vertex where the chip is located is xx. You choose a black vertex yy, and then move the chip along the first edge on the simple path from xx to yy. You are not allowed to choose the same black vertex yy in two operations in a row (i. e., for every two consecutive operations, the chosen black vertex should be different).You end your operations when the chip moves to the black vertex (if it is initially placed in a black vertex, you don't perform the operations at all), or when the number of performed operations exceeds 100500100500.For every vertex ii, you have to determine if there exists a (possibly empty) sequence of operations that moves the chip to some black vertex, if the chip is initially placed on the vertex ii.
InputThe first line contains one integer nn (3≤n≤3⋅1053≤n≤3⋅105) — the number of vertices in the tree.The second line contains nn integers c1,c2,…,cnc1,c2,…,cn (0≤ci≤10≤ci≤1), where ci=0ci=0 means that the ii-th vertex is white, and ci=1ci=1 means that the ii-th vertex is black. At least two values of cici are equal to 11.Then n−1n−1 lines follow, each of them contains two integers uiui and vivi (1≤ui,vi≤n1≤ui,vi≤n; ui≠viui≠vi) — the endpoints of some edge. These edges form a tree.
OutputPrint nn integers. The ii-th integer should be equal to 11 if there exists a (possibly empty) sequence of operations that moves the chip to some black vertex if it is placed on the vertex ii, and 00 if no such sequence of operations exists.
ExampleInputCopy8
0 1 0 0 0 0 1 0
8 6
2 5
7 8
6 5
4 5
6 1
7 3
OutputCopy0 1 1 1 1 0 1 1 
