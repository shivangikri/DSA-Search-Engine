You are standing in front of the room with great treasures. The only thing stopping you is the door with a push-button combination lock. This lock has dd buttons with digits from 00 to d−1d−1. Whenever you press a button, it stays pushed down. You can not pop back up just one button, but there is a "RESET" button — pressing it pops up all other buttons. Initially, no buttons are pushed down.The door instantly opens when some specific set of digits is pushed down. Sadly, you don't know the password for it. Having read the documentation for this specific lock, you found out that there are nn possible passwords for this particular lock. Find the shortest sequence of button presses, such that all possible passwords appear at least once during its execution. Any shortest correct sequence of button presses will be accepted.
InputThe first line contains two integers dd and nn (1≤d≤101≤d≤10; 1≤n≤2d−11≤n≤2d−1). Next nn lines describe possible passwords. Each line contains a string sisi of dd zeros and ones: for all jj from 11 to dd the jj-th character is 1 iff the button with the digit j−1j−1 must be pushed down.All strings sisi are different, and each string contains at least one 1.
OutputOn the first line, print the number kk — the minimum number of button presses. On the second line, print kk tokens, describing the sequence. Whenever you press a button with a digit, print that digit. Whenever you press "RESET", print "R".
ExamplesInputCopy2 2
10
11
OutputCopy2
0 1 
InputCopy3 4
001
111
101
011
OutputCopy6
2 0 R 1 2 0 

NoteIn the second example, the sequence 1 2 R 2 0 1 is also possible.