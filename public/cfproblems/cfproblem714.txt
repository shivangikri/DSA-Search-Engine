This is an interactive problem.Note: the XOR-sum of an array a1,a2,…,ana1,a2,…,an (1≤ai≤1091≤ai≤109) is defined as a1⊕a2⊕…⊕ana1⊕a2⊕…⊕an, where ⊕⊕ denotes the bitwise XOR operation.Little Dormi received an array of nn integers a1,a2,…,ana1,a2,…,an for Christmas. However, while playing with it over the winter break, he accidentally dropped it into his XOR machine, and the array got lost.The XOR machine is currently configured with a query size of kk (which you cannot change), and allows you to perform the following type of query: by giving the machine kk distinct indices x1,x2,…,xkx1,x2,…,xk, it will output ax1⊕ax2⊕…⊕axkax1⊕ax2⊕…⊕axk.As Little Dormi's older brother, you would like to help him recover the XOR-sum of his array a1,a2,…,ana1,a2,…,an by querying the XOR machine.Little Dormi isn't very patient, so to be as fast as possible, you must query the XOR machine the minimum number of times to find the XOR-sum of his array. Formally, let dd be the minimum number of queries needed to find the XOR-sum of any array of length nn with a query size of kk. Your program will be accepted if you find the correct XOR-sum in at most dd queries.Lastly, you also noticed that with certain configurations of the machine kk and values of nn, it may not be possible to recover the XOR-sum of Little Dormi's lost array. If that is the case, you should report it as well.The array a1,a2,…,ana1,a2,…,an is fixed before you start querying the XOR machine and does not change with the queries.
InputThe only line of input contains the integers nn and kk (1≤n≤5001≤n≤500, 1≤k≤n1≤k≤n), the length of the lost array and the configured query size of the XOR machine.Elements of the original array satisfy 1≤ai≤1091≤ai≤109.It can be proven that that if it is possible to recover the XOR sum under the given constraints, it can be done in at most 500500 queries. That is, d≤500d≤500.After taking nn and kk, begin interaction.
OutputIf it is impossible to recover the XOR-sum of the array, output −1−1 immediately after taking nn and kk. Do not begin interaction.Otherwise, when your program finds the XOR-sum of the lost array a1,a2,…,ana1,a2,…,an, report the answer in the following format: "! x", where xx is the XOR sum of the array a1,a2,…,ana1,a2,…,an, and terminate your program normally immediately after flushing the output stream. Note that answering does not count as a query.
InteractionEach query is made in the format "? b", where bb is an array of exactly kk distinct integers from 11 to nn denoting the indices of the elements in the lost array that you want to query the XOR sum of.You will then receive an integer xx, the XOR sum of the queried elements. It can be proven that 0≤x≤2⋅1090≤x≤2⋅109 will always be true.After printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush(stdout) or cout.flush() in C++;  System.out.flush() in Java;  flush(output) in Pascal;  stdout.flush() in Python;  see documentation for other languages.If at any point you make an invalid query or try to make more than 500500 queries (which is the hard limit), the interaction will terminate immediately and give you a Wrong Answer verdict. Note that if you exceed dd queries, the interaction will continue normally unless you also exceed the 500500 query hard limit, though you will still receive a Wrong Answer verdict either way.HacksTo hack a solution, use the following format.The first line contains the integers nn and kk (1≤n≤5001≤n≤500, 1≤k≤n1≤k≤n).The second line contains the the array a1,a2,…,ana1,a2,…,an (1≤ai≤1091≤ai≤109).
ExamplesInputCopy5 3

4

0

1
OutputCopy? 1 2 3

? 2 3 5

? 4 1 5

! 7
InputCopy3 2
OutputCopy-1

NoteIn the first example interaction, the array a1,a2,…,ana1,a2,…,an is 2,1,7,5,62,1,7,5,6 and its XOR-sum is 77. The first query made asks for indices 1,2,31,2,3, so the response is a1⊕a2⊕a3=2⊕1⊕7=4a1⊕a2⊕a3=2⊕1⊕7=4.The second query made asks for indices 2,3,52,3,5, so the response is a2⊕a3⊕a5=1⊕7⊕6=0a2⊕a3⊕a5=1⊕7⊕6=0.The third query made asks for indices 4,1,54,1,5, so the response is a4⊕a1⊕a5=5⊕2⊕6=1a4⊕a1⊕a5=5⊕2⊕6=1. Note that the indices may be output in any order.Additionally, even though three queries were made in the example interaction, it is just meant to demonstrate the interaction format and does not necessarily represent an optimal strategy.In the second example interaction, there is no way to recover the XOR-sum of Little Dormi's array no matter what is queried, so the program immediately outputs −1−1 and exits.