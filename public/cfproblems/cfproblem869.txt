As a teacher, Riko Hakozaki often needs to help her students with problems from various subjects. Today, she is asked a programming task which goes as follows.You are given an undirected complete graph with nn nodes, where some edges are pre-assigned with a positive weight while the rest aren't. You need to assign all unassigned edges with non-negative weights so that in the resulting fully-assigned complete graph the XOR sum of all weights would be equal to 00.Define the ugliness of a fully-assigned complete graph the weight of its minimum spanning tree, where the weight of a spanning tree equals the sum of weights of its edges. You need to assign the weights so that the ugliness of the resulting graph is as small as possible.As a reminder, an undirected complete graph with nn nodes contains all edges (u,v)(u,v) with 1≤u<v≤n1≤u<v≤n; such a graph has n(n−1)2n(n−1)2 edges.She is not sure how to solve this problem, so she asks you to solve it for her.
InputThe first line contains two integers nn and mm (2≤n≤2⋅1052≤n≤2⋅105, 0≤m≤min(2⋅105,n(n−1)2−1)0≤m≤min(2⋅105,n(n−1)2−1))  — the number of nodes and the number of pre-assigned edges. The inputs are given so that there is at least one unassigned edge.The ii-th of the following mm lines contains three integers uiui, vivi, and wiwi (1≤ui,vi≤n1≤ui,vi≤n, u≠vu≠v, 1≤wi<2301≤wi<230), representing the edge from uiui to vivi has been pre-assigned with the weight wiwi. No edge appears in the input more than once.
OutputPrint on one line one integer  — the minimum ugliness among all weight assignments with XOR sum equal to 00.
ExamplesInputCopy4 4
2 1 14
1 4 14
3 2 15
4 3 8
OutputCopy15
InputCopy6 6
3 6 4
2 4 1
4 5 7
3 4 10
3 5 1
5 2 15
OutputCopy0
InputCopy5 6
2 3 11
5 3 7
1 4 10
2 4 14
4 3 8
2 5 6
OutputCopy6

NoteThe following image showcases the first test case. The black weights are pre-assigned from the statement, the red weights are assigned by us, and the minimum spanning tree is denoted by the blue edges.  