You are given a string ss, consisting only of characters '0' and '1'.You have to choose a contiguous substring of ss and remove all occurrences of the character, which is a strict minority in it, from the substring.That is, if the amount of '0's in the substring is strictly smaller than the amount of '1's, remove all occurrences of '0' from the substring. If the amount of '1's is strictly smaller than the amount of '0's, remove all occurrences of '1'. If the amounts are the same, do nothing.You have to apply the operation exactly once. What is the maximum amount of characters that can be removed?
InputThe first line contains a single integer tt (1≤t≤1041≤t≤104) — the number of testcases.The only line of each testcase contains a non-empty string ss, consisting only of characters '0' and '1'. The length of ss doesn't exceed 2⋅1052⋅105.The total length of strings ss over all testcases doesn't exceed 2⋅1052⋅105.
OutputFor each testcase, print a single integer — the maximum amount of characters that can be removed after applying the operation exactly once.
ExampleInputCopy4
01
1010101010111
00110001000
1
OutputCopy0
5
3
0

NoteIn the first testcase, you can choose substrings "0", "1" or "01". In "0" the amount of '0' is 11, the amount of '1' is 00. '1' is a strict minority, thus all occurrences of it are removed from the substring. However, since there were 00 of them, nothing changes. Same for "1". And in "01" neither of '0' or '1' is a strict minority. Thus, nothing changes. So there is no way to remove any characters.In the second testcase, you can choose substring "10101010101". It contains 55 characters '0' and 66 characters '1'. '0' is a strict minority. Thus, you can remove all its occurrences. There exist other substrings that produce the same answer.In the third testcase, you can choose substring "011000100". It contains 66 characters '0' and 33 characters '1'. '1' is a strict minority. Thus, you can remove all its occurrences.