This is an interactive problem!Nastia has a hidden permutation pp of length nn consisting of integers from 11 to nn. You, for some reason, want to figure out the permutation. To do that, you can give her an integer tt (1≤t≤21≤t≤2), two different indices ii and jj (1≤i,j≤n1≤i,j≤n, i≠ji≠j), and an integer xx (1≤x≤n−11≤x≤n−1). Depending on tt, she will answer:   t=1t=1: max(min(x,pi),min(x+1,pj))max(min(x,pi),min(x+1,pj));  t=2t=2: min(max(x,pi),max(x+1,pj))min(max(x,pi),max(x+1,pj)). You can ask Nastia at most ⌊3⋅n2⌋+30⌊3⋅n2⌋+30 times. It is guaranteed that she will not change her permutation depending on your queries. Can you guess the permutation?
InputThe input consists of several test cases. In the beginning, you receive the integer TT (1≤T≤100001≤T≤10000) — the number of test cases.At the beginning of each test case, you receive an integer nn (3≤n≤1043≤n≤104) — the length of the permutation pp.It's guaranteed that the permutation is fixed beforehand and that the sum of nn in one test doesn't exceed 2⋅1042⋅104.
InteractionTo ask a question, print "? tt ii jj xx" (t=1t=1 or t=2t=2, 1≤i,j≤n1≤i,j≤n, i≠ji≠j, 1≤x≤n−11≤x≤n−1) Then, you should read the answer.If we answer with −1−1 instead of a valid answer, that means you exceeded the number of queries or made an invalid query. Exit immediately after receiving −1−1 and you will see the Wrong Answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.To print the answer, print "! p1p1 p2p2 …… pnpn (without quotes). Note that answering doesn't count as one of the ⌊3⋅n2⌋+30⌊3⋅n2⌋+30 queries.After printing a query or printing the answer, do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:  fflush(stdout) or cout.flush() in C++;  System.out.flush() in Java;  flush(output) in Pascal;  stdout.flush() in Python;  See the documentation for other languages. HacksTo hack the solution, use the following test format.The first line should contain a single integer TT (1≤T≤100001≤T≤10000) — the number of test cases.For each test case in the first line print a single integer nn (3≤n≤1043≤n≤104) — the length of the hidden permutation pp.In the second line print nn space-separated integers p1,p2,…,pnp1,p2,…,pn (1≤pi≤n1≤pi≤n), where pp is permutation.Note that the sum of nn over all test cases should not exceed 2⋅1042⋅104.
ExampleInputCopy2
4

3

2

5

3OutputCopy? 2 4 1 3

? 1 2 4 2

! 3 1 4 2

? 2 3 4 2

! 2 5 3 4 1

NoteConsider the first test case.The hidden permutation is [3,1,4,2][3,1,4,2].We print: "? 22 44 11 33" and get back min(max(3,p4),max(4,p1))=3min(max(3,p4),max(4,p1))=3.We print: "? 11 22 44 22" and get back max(min(2,p2),min(3,p4))=2max(min(2,p2),min(3,p4))=2.Consider the second test case.The hidden permutation is [2,5,3,4,1][2,5,3,4,1].We print: "? 22 33 44 22" and get back min(max(2,p3),max(3,p4))=3min(max(2,p3),max(3,p4))=3.