This is the hard version of the problem. The only difference is that in this version 0≤k≤200≤k≤20.There is an array a1,a2,…,ana1,a2,…,an of nn positive integers. You should divide it into a minimal number of continuous segments, such that in each segment there are no two numbers (on different positions), whose product is a perfect square.Moreover, it is allowed to do at most kk such operations before the division: choose a number in the array and change its value to any positive integer.What is the minimum number of continuous segments you should use if you will make changes optimally?
InputThe first line contains a single integer tt (1≤t≤1000)(1≤t≤1000)  — the number of test cases.The first line of each test case contains two integers nn, kk (1≤n≤2⋅1051≤n≤2⋅105, 0≤k≤200≤k≤20).The second line of each test case contains nn integers a1,a2,…,ana1,a2,…,an (1≤ai≤1071≤ai≤107).It's guaranteed that the sum of nn over all test cases does not exceed 2⋅1052⋅105.
OutputFor each test case print a single integer  — the answer to the problem.
ExampleInputCopy3
5 2
18 6 2 4 1
11 4
6 2 2 8 9 1 3 6 3 9 7
1 0
1
OutputCopy1
2
1

NoteIn the first test case it is possible to change the array this way: [3–,6,2,4,5–][3_,6,2,4,5_] (changed elements are underlined). After that the array does not need to be divided, so the answer is 11.In the second test case it is possible to change the array this way: [6,2,3–,8,9,5–,3,6,10–––,11–––,7][6,2,3_,8,9,5_,3,6,10_,11_,7]. After that such division is optimal:   [6,2,3][6,2,3]  [8,9,5,3,6,10,11,7][8,9,5,3,6,10,11,7] 