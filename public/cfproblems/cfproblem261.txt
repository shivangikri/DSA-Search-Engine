Real stupidity beats artificial intelligence every time.— Terry Pratchett, Hogfather, DiscworldYou are given a string ss of length nn and a number kk. Let's denote by rev(s)rev(s) the reversed string ss (i.e. rev(s)=snsn−1...s1rev(s)=snsn−1...s1). You can apply one of the two kinds of operations to the string: replace the string ss with s+rev(s)s+rev(s) replace the string ss with rev(s)+srev(s)+sHow many different strings can you get as a result of performing exactly kk operations (possibly of different kinds) on the original string ss?In this statement we denoted the concatenation of strings ss and tt as s+ts+t. In other words, s+t=s1s2...snt1t2...tms+t=s1s2...snt1t2...tm, where nn and mm are the lengths of strings ss and tt respectively.
InputThe first line contains one integer tt (1≤t≤1001≤t≤100) — number of test cases. Next 2⋅t2⋅t lines contain tt test cases:The first line of a test case contains two integers nn and kk (1≤n≤1001≤n≤100, 0≤k≤10000≤k≤1000) — the length of the string and the number of operations respectively.The second string of a test case contains one string ss of length nn consisting of lowercase Latin letters.
OutputFor each test case, print the answer (that is, the number of different strings that you can get after exactly kk operations) on a separate line.It can be shown that the answer does not exceed 109109 under the given constraints.
ExampleInputCopy4
3 2
aab
3 3
aab
7 1
abacaba
2 0
ab
OutputCopy2
2
1
1

NoteIn the first test case of the example:After the first operation the string ss can become either aabbaa or baaaab. After the second operation there are 2 possibilities for ss: aabbaaaabbaa and baaaabbaaaab.